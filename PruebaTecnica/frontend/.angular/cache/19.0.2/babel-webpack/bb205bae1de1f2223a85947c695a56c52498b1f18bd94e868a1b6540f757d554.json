{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ClienteService = /*#__PURE__*/(() => {\n  class ClienteService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://localhost:8090/api/clientes';\n    }\n    obtenerCliente({\n      tipo,\n      numero\n    }) {\n      return this.http.get(`${this.baseUrl}/${tipo}/${numero}`);\n    }\n    static {\n      this.ɵfac = function ClienteService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ClienteService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ClienteService,\n        factory: ClienteService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ClienteService;\n})();","map":{"version":3,"names":["ClienteService","constructor","http","baseUrl","obtenerCliente","tipo","numero","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/workspaces/PruebaTecnica/PruebaTecnica/frontend/src/app/services/cliente.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClienteService {\r\n  private baseUrl = 'http://localhost:8090/api/clientes';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  obtenerCliente({ tipo, numero }: { tipo: string; numero: string; }): Observable<unknown> {\r\n    return this.http.get<unknown>(`${this.baseUrl}/${tipo}/${numero}`);\r\n  }\r\n}\r\n"],"mappings":";;AAOA,WAAaA,cAAc;EAArB,MAAOA,cAAc;IAGzBC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MAFhB,KAAAC,OAAO,GAAG,oCAAoC;IAEf;IAEvCC,cAAcA,CAAC;MAAEC,IAAI;MAAEC;IAAM,CAAqC;MAChE,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,GAAG,IAAI,CAACJ,OAAO,IAAIE,IAAI,IAAIC,MAAM,EAAE,CAAC;IACpE;;;yCAPWN,cAAc,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;MAAA;IAAA;;;eAAdX,cAAc;QAAAY,OAAA,EAAdZ,cAAc,CAAAa,IAAA;QAAAC,UAAA,EAFb;MAAM;IAAA;;SAEPd,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}